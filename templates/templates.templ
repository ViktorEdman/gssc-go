package templates

import "github.com/ViktorEdman/gssc-go/types"
import "fmt"
import "github.com/ViktorEdman/gssc-go/data"
import "github.com/ViktorEdman/gssc-go/auth"

templ AddServerForm() {
	<dialog id="addServerDialog" class="backdrop:backdrop-blur bg-black rounded-xl text-white ">
		<form hx-post="/servers" id="addServerForm" class="flex flex-col w-max h-max p-4 fade-me-in bg-black " hx-on::after-request='this.reset(); document.querySelector("#addServerDialog").close()' hx-swap="none">
			<label for="name">Server name</label>
			<input type="text" autocomplete="off" autofocus required name="name"/>
			<label for="host">Hostname / IP address</label>
			<input type="text" autocomplete="off" required name="host"/>
			<label for="port">Port number</label>
			<input type="number" autocomplete="off" required min="1024" max="65565" name="port"/>
			<label for="scaninterval">Seconds between scans</label>
			<input type="number" required min="10" max="600" name="scaninterval" value="30"/>
			<div class="flex flex-row">
				<button class="rounded-xl bg-green-400 p-2 m-2 w-24" type="submit">Add</button>
				<button
					class="rounded-xl bg-red-400 p-2 m-2 cancel-button w-24"
					type="reset"
					onclick='document.querySelector("#addServerDialog").close()'
				>Cancel</button>
			</div>
		</form>
	</dialog>
}

templ LinuxGSMFormPartial(server *data.Gameserver) {
	<div>
		<label for="gsmenabled">Enable LinuxGSM functions</label>
		<input
			name="gsmenabled"
			type="checkbox"
			if server.Localgsmserver {
				checked
			}
			onchange={ LinuxGSMForm(server.ID) }
			id={ "gsmenabled-" + fmt.Sprint(server.ID) }
		/>
	</div>
	<div class="flex flex-col hidden" id={ "gsmcredentials-" + fmt.Sprint(server.ID) }>
		<label for="lgsmuser">LGSM username</label>
		<input name="lgsmuser"/>
		<label for="lgsmpassword">LGSM password</label>
		<input name="lgsmpassword"/>
		<label for="lgsmcommand">LGSM command</label>
		<input name="lgsmcommand"/>
	</div>
}

script LinuxGSMForm(id int64) {
  const checked = event.target.checked
  const credentialsForm = document.querySelector(`#gsmcredentials-${id}`)
  console.log(credentialsForm)
  if (checked) {
    credentialsForm.classList.remove("hidden")
    return
    }
  credentialsForm.classList.add("hidden")

}

templ EditServerForm(server data.Gameserver) {
	<form hx-put={ fmt.Sprintf("/servers/%d", server.ID) } id={ fmt.Sprintf("edit-server-%d", server.ID) } class="flex flex-col flex-grow w-full sm:flex-grow-0 m-2 p-8 fade-me-in bg-opacity-50 bg-black rounded-xl" hx-swap="outerHTML">
		<label for="name">Server name</label>
		<input type="text" required name="name" value={ server.Name }/>
		<label for="host">Hostname / IP address</label>
		<input type="text" required name="host" value={ server.Host }/>
		<label for="port">Port number</label>
		<input type="number" required min="1024" max="65565" name="port" value={ fmt.Sprint(server.Port) }/>
		<label for="scaninterval">Seconds between scans</label>
		<input type="number" required min="10" max="600" name="scaninterval" value={ fmt.Sprint(server.Scanintervalseconds) }/>
		<div>
			<label for="ismonitored">Enable monitoring</label>
			<input
				type="checkbox"
				name="ismonitored"
				if server.Monitored {
					checked
				}
			/>
		</div>
		@LinuxGSMFormPartial(&server)
		<button class="rounded-xl green p-2 m-2" type="submit">Save</button>
		<button class="red rounded-xl p-2 m-2" type="reset" hx-get={ fmt.Sprintf("/servers/%d", server.ID) } hx-target={ fmt.Sprintf("#edit-server-%d", server.ID) } hx-swap="outerHTML">Cancel</button>
	</form>
}

templ layout() {
	<html>
		<head>
			<link href="static/css/tailwind.css" rel="stylesheet"/>
			<link href="static/css/index.css" rel="stylesheet"/>
			<link rel="icon" href="static/img/favicon.png"/>
			<meta name="description" content="Monitor and edit game servers"/>
			<title>GSS Enterprise</title>
			<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/sse.js"></script>
			<script>
        function removeParent(e) {
            e.preventDefault()
            console.log(e)
            console.log(this)
        }
      </script>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<noscript>
				<meta http-equiv="refresh" content="30"/>
			</noscript>
		</head>
		<body class="h-screen bg-gradient-to-t from-[#d1138f] to-[#183d88]">
			{ children... }
			@AddServerForm()
			<script>
          function main() {
              const sseDot = document.querySelector("#sse-dot")
              const sseSpan = document.querySelector("#sse-text")
              let timeout
              htmx.on("htmx:sseOpen", () => {
                sseDot.classList = "green dot"
                sseSpan.innerText = "Monitoring server connected"
                clearTimeout(timeout)
              })
              htmx.on("htmx:sseError", () => {
                sseDot.classList = "red dot"
                sseSpan.innerText = "Monitoring server disconnected"
                timeout = setTimeout(() => location.reload(), 20_000)
              })
            }
            main()
          
      </script>
		</body>
	</html>
}

func isAuthorized(ctx context.Context) bool {
	val, ok := ctx.Value(auth.ContextKey("Authorized")).(bool)
	if ok {
		return val
	} else {
		return false
	}
}

templ Index(servers []types.ServerStatusWithPlayers) {
	@layout() {
		<div class="container mx-auto px-2 pt-2 text-white max-w-3xl">
			<h1 class="text-3xl bg-red text-gray-100">GSS Enterprise</h1>
			<p>
				Authorized: { 
          fmt.Sprint(isAuthorized(ctx)) }
			</p>
			if isAuthorized(ctx) {
				<a href="/auth/google/signout" hx-boost>Sign out</a>
			} else {
				<a href="/auth/google">Sign in</a>
			}
			<div class="flex flex-row flex-wrap">
				<div id="sse-info " class="p-2 m-2  w-max rounded-xl bg-opacity-50 bg-gray-500">
					<span id="sse-dot"></span>
					<span id="sse-text"></span>
					<noscript>
						<p>Automatic on-page updates require javascript. </p>
						<p>Falling back to page refresh every 30 seconds.</p>
						<p>
							Last update was at { getTimestamp() }
						</p>
					</noscript>
				</div>
				if isAuthorized(ctx) {
					<div>
						<button id="addServerButton" onclick="document.querySelector('#addServerDialog').showModal()" class="green button p-2 m-2 rounded-xl">
							Add Server
						</button>
					</div>
				}
			</div>
			<h2 class="text-2xl">Monitored servers</h2>
			@ServerList(servers)
		</div>
	}
}

templ ServerList(servers []types.ServerStatusWithPlayers) {
	<ul id="server-list" class="flex flex-row flex-wrap text-center" hx-swap="beforeend" hx-ext="sse" sse-swap="newserver" sse-connect="/events">
		for _, server := range servers {
			@ServerTemplate(server)
		}
	</ul>
}

templ ServerTemplate(server types.ServerStatusWithPlayers) {
	<li
		class="basis-52 m-2 p-4 fade-me-in bg-opacity-50 bg-black rounded-xl flex flex-col grow sm:grow-0 "
		id={ fmt.Sprintf("server-%d", server.Gameserver.ID) }
		hx-swap="outerHTML"
		sse-swap={ fmt.Sprintf("server-%d", server.Gameserver.ID) }
	>
		<div>
			<h2 class="text-xl">
				<span
					if server.Serverstatus.Online {
						class="green dot"
					} else {
						class="red dot"
					}
				></span>{ server.Gameserver.Name }
				if !server.Gameserver.Monitored {
					is not monitored!
				} else if !server.Serverstatus.Online {
					is DOWN!
				} else {
					is UP!
				}
			</h2>
		</div>
		if server.Serverstatus.Online {
			<h3 class="text-lg">Players { fmt.Sprint(*server.Serverstatus.Currentplayers) }/{ fmt.Sprint(*server.Serverstatus.Maxplayers) }</h3>
		}
		if server.Serverstatus.Game != nil {
			Running { *server.Serverstatus.Game }
		}
		if len(server.Players) > 0 {
			<ul>
				for _, player := range server.Players {
					<li class="list-disc ml-4">{ player }</li>
				}
			</ul>
		}
		if server.Serverstatus.Connectport != nil {
			<div>Join at { server.Gameserver.Host }:{ fmt.Sprint(*server.Serverstatus.Connectport) }</div>
		}
		<div id={ fmt.Sprintf("timestamp-%d", server.Gameserver.ID) } class="align-bottom table-cell">
			Last update at { fmt.Sprintf("%02d:%02d:%02d",
      server.Serverstatus.Timestamp.Local().Hour(),
      server.Serverstatus.Timestamp.Local().Minute(),
      server.Serverstatus.Timestamp.Local().Second()) }
		</div>
		if isAuthorized(ctx) {
			<h3>Server controls</h3>
			<div class="flex flex-row mt-auto">
				<button class="bg-blue-500 rounded-xl m-2 p-2 w-16 flex-grow" hx-get={ fmt.Sprintf("/servers/edit/%d", server.Gameserver.ID) } hx-target={ fmt.Sprintf("#server-%d", server.Gameserver.ID) }>Edit</button>
				<button class="bg-red-500 rounded-xl m-2 p-2 w-16 flex-grow" hx-delete={ fmt.Sprintf("/servers/%d", server.Gameserver.ID) } hx-target={ fmt.Sprintf("#server-%d", server.Gameserver.ID) }>Delete</button>
			</div>
		}
	</li>
}
